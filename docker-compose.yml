services:
  postgres_db:
    build:
      context: ./db/postgres
    environment:
      - POSTGRES_USER=heartistry
      - POSTGRES_PASSWORD=heartistry
      - POSTGRES_DB=heartistry
    container_name: postgres_db
    networks:
      custom_network:
        ipv4_address: 192.168.1.3
    ports:
      - "5432:5432"
    volumes:
      - pg-data:/var/lib/postgresql/data
    restart: always

  user-service:
    build:
      context: ./user-service
    depends_on:
      - postgres_db
    container_name: user-service
    ports: 
      - "3030:3030"
    environment:
      - DB_TYPE=postgres
      - DB_HOST=192.168.1.3
      - DB_PORT=5432
      - DB_USERNAME=heartistry
      - DB_PASSWORD=heartistry
      - DB_NAME=heartistry
      - DATABASE_URL=postgres://heartistry:heartistry@postgres_db:5432/heartistry
      - JWT_SECRET=c66077ac1510b83fbda3822b8007fafb9fdf6e550d13574bfd98164d0328261e
      - TOKEN_EXPIRE_TIME=24h
      - MAIL_HOST=smtp.gmail.com
      - MAIL_USER=heartistry.service@gmail.com
      - MAIL_PASSWORD=buevjbrngdzaobip
      - MAIL_FROM=noreply@heartistry.com
    networks:
      custom_network:
        ipv4_address: 192.168.1.4

  mysql_db:
    build:
      context: ./db/mysql
    environment:
      - MYSQL_DATABASE=heartistry
      - MYSQL_PASSWORD=heartistry
      - MYSQL_ROOT_PASSWORD=verysecret
      - MYSQL_USER=heartistry
    container_name: mysql_db
    networks:
      custom_network:
        ipv4_address: 192.168.1.5
    ports:
            - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    restart: always

  task-service:
    build:
      context: ./task-service
    depends_on:
      - mysql_db
    container_name: task-service
    ports:
      - "8000:8000"
    environment:
      - SPRING_APPLICATION_NAME=heartistry-task-api
      - SPRING_DATASOURCE_URL=jdbc:mysql://192.168.1.5:3306/heartistry
      - SPRING_DATASOURCE_USERNAME=heartistry
      - SPRING_DATASOURCE_PASSWORD=heartistry
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=com.mysql.cj.jdbc.Driver
      - SPRING_JPA_SHOW_SQL=true
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRINGDOC_SWAGGER_UI_PATH=/swagger-ui.html
      - JWT_SECRET=c66077ac1510b83fbda3822b8007fafb9fdf6e550d13574bfd98164d0328261e
      - SERVER_PORT=8000
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=*
      - MANAGEMENT_PROMETHEUS_METRICS_EXPORT_ENABLED=true
      - MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENDPOINT=/actuator/prometheus
    networks:
      custom_network:
        ipv4_address: 192.168.1.6
    
  redis:
    build:
      context: ./tyk-api-gateway/redis
      dockerfile: Dockerfile  # Reference to the Dockerfile
    container_name: tyk-redis
    ports:
      - "6379:6379"  # Map the port to the host machine
    networks:
      custom_network:
        ipv4_address: 192.168.1.7
    restart: always

  tyk-api-gateway:
    build:
      context: ./tyk-api-gateway # The directory where the Dockerfile is located
    container_name: tyk-gateway
    ports:
      - "8080:8080"  # Map port 8080 on the host to 8080 on the container
    networks:
      custom_network:
        ipv4_address: 192.168.1.8
    depends_on:
      - redis
      - user-service
      - task-service
    volumes:
      - ./tyk-api-gateway/tyk.standalone.conf:/opt/tyk-gateway/tyk.conf
      - ./tyk-api-gateway/apps:/opt/tyk-gateway/apps

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml  # Prometheus configuration
    networks:
      custom_network:
        ipv4_address: 192.168.1.9

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana  # To persist Grafana dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin  # Default Grafana username
      - GF_SECURITY_ADMIN_PASSWORD=admin  # Default Grafana password
    networks:
      custom_network:
        ipv4_address: 192.168.1.10
    depends_on:
      - prometheus

  postgres_exporter:
    image: bitnami/postgres-exporter
    environment:
      DATA_SOURCE_NAME: postgres://heartistry:heartistry@192.168.1.3:5432/heartistry?sslmode=disable
    networks:
      custom_network:
        ipv4_address: 192.168.1.11
    ports:
      - "9187:9187"

  mysql_exporter:
    image: prom/mysqld-exporter
    container_name: mysql_exporter
    ports:
      - "9104:9104"  # Default port for MySQL Exporter
    environment:
      - DATA_SOURCE_NAME=heartistry:heartistry@(192.168.1.5:3306)/  # MySQL credentials and address
    networks:
      custom_network:
        ipv4_address: 192.168.1.12



volumes:
  pg-data:
  mysql-data:
  grafana-data:



networks:
  custom_network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.1.0/24